- name: gather facts
  shell: aws ec2 describe-instances --region {{ awsregion }} --filter Name=tag-value,Values={{ tag }} Name=subnet-id,Values={{ vpc.subnets.0.id }} Name=instance-state-name,Values=running
  register: ec2out
  changed_when: false

- name: add ec2 fact
  set_fact:
    instances: "{{ ec2out.stdout }}"
  changed_when: false

- name: terminate ec2
  ec2:
    instance_ids: '{{ item.InstanceId }}'
    region: '{{ awsregion }}'
    state: absent
    wait: True
  with_items: "{{  instances.Reservations  | map(attribute='Instances') | list }}"

- name: launching ec2 instance
  ec2:
   key_name: "{{ serverkeyname }}"
   instance_type: t2.micro
   image: ami-20fab440
   wait: yes
   group_id: "{{ basic_firewalls.group_id }}"
   count: 1
   assign_public_ip: yes
   instance_profile_name: ecsInstanceRole
   region: "{{ awsregion }}"
   vpc_subnet_id: "{{ vpc.subnets.0.id }}"
   instance_tags: {"Name":"{{ tag }}","Environment":"{{ env }}"}
   user_data: |
             #!/bin/bash
             echo ECS_CLUSTER={{ ecs_cluster }} >> /etc/ecs/ecs.config
   state: present
  register: ec2
  #when:  "tag  not in ec2out.stdout" 
  
  
- name: set fact
  set_fact:
      public_ip: "{{ ec2.instances.0.public_ip }}"
      instance_id: "{{ ec2.instances.0.id }}"
  when: ec2.changed
  changed_when: false

- name: Add tag to Instance(s)
  ec2_tag:
     resource: "{{ instance_id }}" 
     region: "{{ awsregion }}"
     state: present
  args:
     tags:
       Name: "{{ tag }}"
  when: ec2.changed
 

- name: wait until the ec2 is running completely
  shell: aws ec2 describe-instance-status --region {{ awsregion }}  --instance-ids {{ instance_id }} --filter Name=instance-status.reachability,Values=passed
  register: result
  until:  result.stdout.find("passed") != -1
  retries: 20
  delay: 20
  when: ec2.changed
  changed_when: false
